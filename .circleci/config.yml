version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end aws cloudformation stacks
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: 
            on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: # Add parameter here
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            status=$(curl -H "token: <<parameters.workflow_id>>" \
              --request GET https://api.memstash.io/values/migration-<<parameters.workflow_id>>)
            echo $status
            if [[ "${status}" == 1 ]]; then
              npm run migrations:revert
            fi
          when:
            on_success

jobs:  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Creating .env for building backend environment
          command: |
            {
              echo 'ENVIRONMENT=production'
              echo 'VERSION=1'
              echo 'TYPEORM_CONNECTION=postgres'
              echo 'TYPEORM_MIGRATIONS_DIR=./src/migrations'
              echo 'TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts'
              echo 'TYPEORM_MIGRATIONS=./src/migrations/*.ts'
              echo 'TYPEORM_HOST=$TYPEORM_HOST'
              echo 'TYPEORM_PORT=$TYPEORM_PORT'
              echo 'TYPEORM_USERNAME=$TYPEORM_USERNAME'
              echo 'TYPEORM_PASSWORD=$TYPEORM_PASSWORD'
              echo 'TYPEORM_DATABASE=$TYPEORM_DATABASE'
            } >> backend/.env
      - run:
          name: Back-end build
          command: |
            cd backend
            cat .env
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      # Your job code here
      - restore_cache:
          keys: [frontend-test] # Restore from cache
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/test] 
          key: frontend-test
        # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      # Your job code here
      - restore_cache:
          keys: [backend-test] # Restore from cache
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/test]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      # Your job code here
      - restore_cache:
          keys: [frontend-scan] # Restore from cache
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/scan]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-scan] # Restore from cache
          # Your job code here
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/scan]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Retrieve backend url
          command: |
            export BACK_END_URL=$(aws cloudformation describe-stacks \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)

              echo $BACK_END_URL
      - run: 
          name: Persist backend url to secret store
          command: |
            echo $BACK_END_URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACK_END_URL}" \
              https://api.memstash.io/values/back_end_url

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/back_end_url)
            echo "${BACKEND_URL}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install TAR
          command: |
            sudo yum update tar
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}" 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints:
            - "7a:6c:4e:6c:4e:86:8a:3d:c0:06:c5:96:52:d0:27:dd"
      - attach_workspace: # attach workspace
          at: ~/     
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            {
              echo 'ENVIRONMENT=production'
              echo 'VERSION=1'
              echo 'TYPEORM_CONNECTION=postgres'
              echo 'TYPEORM_MIGRATIONS_DIR=./src/migrations'
              echo 'TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts'
              echo 'TYPEORM_MIGRATIONS=./src/migrations/*.ts'
              echo 'TYPEORM_HOST=$TYPEORM_HOST'
              echo 'TYPEORM_PORT=$TYPEORM_PORT'
              echo 'TYPEORM_USERNAME=$TYPEORM_USERNAME'
              echo 'TYPEORM_PASSWORD=$TYPEORM_PASSWORD'
              echo 'TYPEORM_DATABASE=$TYPEORM_DATABASE'
            } >> backend/.env

            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: Install AWS CLI for rolling back purposes
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Creating .env for building backend environment
          command: |
            {
              echo 'ENVIRONMENT=production'
              echo 'VERSION=1'
              echo 'TYPEORM_CONNECTION=postgres'
              echo 'TYPEORM_MIGRATIONS_DIR=./src/migrations'
              echo 'TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts'
              echo 'TYPEORM_MIGRATIONS=./src/migrations/*.ts'
              echo 'TYPEORM_HOST=$TYPEORM_HOST'
              echo 'TYPEORM_PORT=$TYPEORM_PORT'
              echo 'TYPEORM_USERNAME=$TYPEORM_USERNAME'
              echo 'TYPEORM_PASSWORD=$TYPEORM_PASSWORD'
              echo 'TYPEORM_DATABASE=$TYPEORM_DATABASE'
            } >> backend/.env
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            sudo apt update
            sudo apt install -y awscli
            cd backend
            cat .env
            npm i
            npm audit fix
            # npm cache clean --force
            npm run build
            npm run migrations 2>&1 | tee migrations-log.txt
      - run:
          name: Send migration results to memstash
          command: |
            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              return 1
            fi
            if cat migration-log.txt | grep "has been executed successfully"; then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT --data "1" \
                https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID}"
            fi
      # - destroy-environment:
      #    workflow_id: "${CIRCLE_WORKFLOW_ID}"  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      - run: # Here's where you will add some code to rollback on failure 
          name: Destroy Infrastructure on fail
          command: destroy-environment
          when: on_fail    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      - run: # Here's where you will add some code to rollback on failure 
          name: Destroy Infrastructure on fail
          command: destroy-environment
          when: on_fail 

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 # Lightweight Docker image 
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      - run: # Here's where you will add some code to rollback on failure 
          name: Destroy Infrastructure on fail
          command: destroy-environment
          when: on_fail 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - run: # Here's where you will add some code to rollback on failure 
          name: Destroy Infrastructure on fail
          command: destroy-environment
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli # Docker image here
    steps:
      - checkout # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]